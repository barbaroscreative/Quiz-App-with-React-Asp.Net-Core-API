[{"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\index.js":"1","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\reportWebVitals.js":"2","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\App.js":"3","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Login.js":"4","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Center.js":"5","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\hooks\\useForm.js":"6","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\api\\index.js":"7","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\hooks\\useStateContext.js":"8","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Quiz.js":"9","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Result.js":"10","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\helper\\index.js":"11","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Layout.js":"12","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Answer.js":"13","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Authenticate.js":"14"},{"size":967,"mtime":1647960440181,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1647681494209,"results":"17","hashOfConfig":"16"},{"size":717,"mtime":1648111491573,"results":"18","hashOfConfig":"16"},{"size":3455,"mtime":1647958425024,"results":"19","hashOfConfig":"16"},{"size":405,"mtime":1647708438916,"results":"20","hashOfConfig":"16"},{"size":512,"mtime":1647709426947,"results":"21","hashOfConfig":"16"},{"size":597,"mtime":1648038886509,"results":"22","hashOfConfig":"16"},{"size":1168,"mtime":1647958258743,"results":"23","hashOfConfig":"16"},{"size":3301,"mtime":1648046451820,"results":"24","hashOfConfig":"16"},{"size":4404,"mtime":1648046499991,"results":"25","hashOfConfig":"16"},{"size":160,"mtime":1647955787052,"results":"26","hashOfConfig":"16"},{"size":995,"mtime":1647960075660,"results":"27","hashOfConfig":"16"},{"size":2686,"mtime":1648111337481,"results":"28","hashOfConfig":"16"},{"size":346,"mtime":1648112627349,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1wc8lpy",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\index.js",[],[],["76","77"],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\reportWebVitals.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\App.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Login.js",["78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],[],"import React, { useEffect } from 'react'\r\nimport { Button, Card, CardContent, TextField, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport Center from './Center'\r\nimport useForm from '../hooks/useForm'\r\nimport { createAPIEndpoint, ENDPOINTS } from '../api/index'\r\nimport { toBeEmptyDOMElement } from '@testing-library/jest-dom/dist/matchers'\r\nimport useStateContext from '../hooks/useStateContext'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst getFreshModel = () => ({\r\n    name: '',\r\n    email: ''\r\n})\r\n\r\nexport default function Login() {\r\n\r\n    const { context, setContext, resetContext } = useStateContext();\r\n    const navigate = useNavigate();\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange\r\n    } = useForm(getFreshModel);\r\n\r\n    useEffect(() => {\r\n        resetContext()\r\n    }, [])\r\n\r\n\r\n    const login = e => {\r\n        e.preventDefault();\r\n        if (validate())\r\n            createAPIEndpoint(ENDPOINTS.participant)\r\n                .post(values)\r\n                .then(res => {\r\n                    setContext({ participantId: res.data.participantId })\r\n                    navigate('/quiz')\r\n\r\n                })\r\n                .catch(err => console.error(err))\r\n    }\r\n\r\n    const validate = () => {\r\n        let temp = {}\r\n        temp.email = (/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i).test(values.email) ? \"\" : \"Email is not valid.\"\r\n        temp.name = values.name != \"\" ? \"\" : \"This field is required.\"\r\n        setErrors(temp)\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n\r\n    return (\r\n        <Center>\r\n            <Card sx={{ width: 400 }}>\r\n                <CardContent sx={{ textAlign: \"center\" }}>\r\n                    <Typography variant=\"h3\" sx={{ my: 3 }}>\r\n                        Quiz App\r\n                    </Typography>\r\n                    <Box sx={{\r\n                        '& .MuiTextField-root': {\r\n                            m: 1,\r\n                            width: '90%'\r\n                        }\r\n                    }}>\r\n                        <form noValidate autoComplete=\"on\" onSubmit={login}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                value={values.email}\r\n                                onChange={handleInputChange}\r\n                                variant=\"outlined\"\r\n                                {...(errors.email && { error: true, helperText: errors.email })} />\r\n                            <TextField\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                value={values.name}\r\n                                onChange={handleInputChange}\r\n                                variant=\"outlined\"\r\n                                {...(errors.name && { error: true, helperText: errors.name })} />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                sx={{ width: '90%' }}>Start</Button>\r\n                        </form>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Center>\r\n\r\n\r\n    )\r\n}\r\n","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Center.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\hooks\\useForm.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\api\\index.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\hooks\\useStateContext.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Quiz.js",["94","95"],[],"import { Card, CardContent, CardHeader, CardMedia, LinearProgress, List, ListItemButton, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BASE_URL, createAPIEndpoint, ENDPOINTS } from '../api';\r\nimport { getFormatedTime } from '../helper';\r\nimport useStateContext from '../hooks/useStateContext';\r\n\r\nexport default function Quiz() {\r\n\r\n    const [qns, setQns] = useState([])\r\n    const [qnIndex, setQnIndex] = useState(0)\r\n    const [timeTaken, setTimeTaken] = useState(0)\r\n    const { context, setContext } = useStateContext()\r\n    const navigate = useNavigate()\r\n\r\n    let timer;\r\n\r\n    const startTimer = () => {\r\n        timer = setInterval(() => {\r\n            setTimeTaken(prev => prev + 1)\r\n        }, [1000])\r\n    }\r\n\r\n    useEffect(() => {\r\n        setContext({\r\n            timeTaken: 0,\r\n            selectedOptions: []\r\n        })\r\n        createAPIEndpoint(ENDPOINTS.question)\r\n            .fetch()\r\n            .then(res => {\r\n                setQns(res.data)\r\n                startTimer()\r\n            })\r\n            .catch(err => { console.log(err); })\r\n\r\n        return () => { clearInterval(timer) }\r\n    }, [])\r\n\r\n    const updateAnswer = (qnId, optionIdx) => {\r\n        const temp = [...context.selectedOptions]\r\n        temp.push({\r\n            qnId,\r\n            selected: optionIdx\r\n        })\r\n\r\n\r\n\r\n        if (qnIndex < 4) {\r\n            setContext({ selectedOptions: [...temp] })\r\n            setQnIndex(qnIndex + 1)\r\n        } else {\r\n            setContext({ selectedOptions: [...temp], timeTaken })\r\n            navigate(\"/result\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        qns.length != 0\r\n            ? <Card\r\n                sx={{\r\n                    maxWidth: 640, mx: 'auto', mt: 5,\r\n                    '& .MuiCardHeader-action': { m: 0, alignSelf: 'center' }\r\n                }}>\r\n                <CardHeader\r\n                    title={'Question ' + (qnIndex + 1) + ' of 5'}\r\n                    action={<Typography>{getFormatedTime(timeTaken)}</Typography>} />\r\n                <Box>\r\n                    <LinearProgress variant=\"determinate\" value={(qnIndex + 1) * 100 / 5} />\r\n                </Box>\r\n                {qns[qnIndex].imageName != null\r\n                    ? <CardMedia\r\n                        component=\"img\"\r\n                        image={BASE_URL + 'images/' + qns[qnIndex].imageName}\r\n                        sx={{ width: '50%', m: '10px auto' }} />\r\n                    : null}\r\n                <CardContent>\r\n                    <Typography variant=\"h6\">\r\n                        {qns[qnIndex].qnInWords}\r\n                    </Typography>\r\n                    <List>\r\n                        {qns[qnIndex].options.map((item, idx) =>\r\n                            <ListItemButton key={idx} onClick={() => updateAnswer(qns[qnIndex].qnId, idx)}>\r\n                                <div>\r\n                                    <b>{String.fromCharCode(65 + idx) + \" . \"}</b> {item}\r\n                                </div>\r\n                            </ListItemButton>\r\n                        )}\r\n\r\n                    </List>\r\n                </CardContent>\r\n            </Card>\r\n            : null\r\n    )\r\n}\r\n","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Result.js",["96","97","98"],[],"import { Alert, Button, Card, CardContent, CardMedia, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { createAPIEndpoint, ENDPOINTS } from '../api';\r\nimport { getFormatedTime } from '../helper';\r\nimport useStateContext from '../hooks/useStateContext';\r\nimport { green } from '@mui/material/colors';\r\nimport Answer from './Answer';\r\n\r\nexport default function Result() {\r\n    const { context, setContext } = useStateContext();\r\n    const [score, setScore] = useState(0);\r\n    const [qnAnswers, setQnAnswers] = useState([])\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n\r\n    useEffect(() => {\r\n        const ids = context.selectedOptions.map(x => x.qnId)\r\n        createAPIEndpoint(ENDPOINTS.getAnswers)\r\n            .post(ids)\r\n            .then(res => {\r\n                const qna = context.selectedOptions\r\n                    .map(x => ({\r\n                        ...x,\r\n                        ...(res.data.find(y => y.qnId == x.qnId))\r\n                    }))\r\n                setQnAnswers(qna)\r\n                calculateScore(qna)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    const calculateScore = qna => {\r\n        let tempScore = qna.reduce((acc, curr) => {\r\n            return curr.answer == curr.selected ? acc + 1 : acc;\r\n        }, 0)\r\n        setScore(tempScore)\r\n    }\r\n\r\n    const restart = () => {\r\n        setContext({\r\n            timeTaken: 0,\r\n            selectedOptions: []\r\n        })\r\n        navigate(\"/quiz\")\r\n    }\r\n\r\n    const submitScore = () => {\r\n        createAPIEndpoint(ENDPOINTS.participant)\r\n            .put(context.participantId, {\r\n                participantId: context.participantId,\r\n                score: score,\r\n                timeTaken: context.timeTaken\r\n            })\r\n            .then(res => {\r\n                setShowAlert(true)\r\n                setTimeout(() => {\r\n                    setShowAlert(false)\r\n                }, 4000);\r\n            })\r\n            .catch(err => { console.log(err) })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card sx={{ mt: 5, display: 'flex', width: '100%', maxWidth: 640, mx: 'auto' }}>\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', flexGrow: 1 }}>\r\n                    <CardContent sx={{ flex: '1 0 auto', textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\">Congratulations!</Typography>\r\n                        <Typography variant=\"h6\">\r\n                            YOUR SCORE\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" sx={{ fontWeight: 600 }}>\r\n                            <Typography variant=\"span\" color={green[500]}>\r\n                                {score}\r\n                            </Typography>/5\r\n                        </Typography>\r\n                        <Typography variant=\"h6\">\r\n                            Took {getFormatedTime(context.timeTaken) + ' mins'}\r\n                        </Typography>\r\n                        <Button variant=\"contained\"\r\n                            sx={{ mx: 1 }}\r\n                            size=\"small\"\r\n                            onClick={submitScore}>\r\n                            Submit\r\n                        </Button>\r\n                        <Button variant=\"contained\"\r\n                            sx={{ mx: 1 }}\r\n                            size=\"small\"\r\n                            onClick={restart}>\r\n                            RE-TRY\r\n                        </Button>\r\n                        <Alert\r\n                            severity=\"success\"\r\n                            variant=\"string\"\r\n                            sx={{\r\n                                width: '60%',\r\n                                m: 'auto',\r\n                                visibility: showAlert ? 'visible' : 'hidden'\r\n                            }}>\r\n                            Score Updated.\r\n                        </Alert>\r\n\r\n                    </CardContent>\r\n                </Box>\r\n                <CardMedia\r\n                    component=\"img\"\r\n                    sx={{ width: 220 }}\r\n                    image=\"./result.png\"\r\n                />\r\n            </Card>\r\n            <Answer qnAnswers={qnAnswers} />\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\helper\\index.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Layout.js",[],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Answer.js",["99","100","101"],[],"C:\\Users\\barba\\Desktop\\Asp.Net Core\\quiz-client\\src\\components\\Authenticate.js",["102"],[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":29},{"ruleId":"107","severity":1,"message":"111","line":18,"column":13,"nodeType":"109","messageId":"110","endLine":18,"endColumn":20},{"ruleId":"107","severity":1,"message":"112","line":23,"column":9,"nodeType":"109","messageId":"110","endLine":23,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":31,"column":8,"nodeType":"115","endLine":31,"endColumn":10,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":49,"column":36,"nodeType":"119","messageId":"120","endLine":49,"endColumn":37,"suggestions":"121"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":44,"nodeType":"119","messageId":"120","endLine":49,"endColumn":45,"suggestions":"123"},{"ruleId":"117","severity":1,"message":"118","line":49,"column":60,"nodeType":"119","messageId":"120","endLine":49,"endColumn":61,"suggestions":"124"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":68,"nodeType":"119","messageId":"120","endLine":49,"endColumn":69,"suggestions":"125"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":77,"nodeType":"119","messageId":"120","endLine":49,"endColumn":78,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":81,"nodeType":"119","messageId":"120","endLine":49,"endColumn":82,"suggestions":"127"},{"ruleId":"117","severity":1,"message":"118","line":49,"column":97,"nodeType":"119","messageId":"120","endLine":49,"endColumn":98,"suggestions":"128"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":105,"nodeType":"119","messageId":"120","endLine":49,"endColumn":106,"suggestions":"129"},{"ruleId":"117","severity":1,"message":"118","line":49,"column":122,"nodeType":"119","messageId":"120","endLine":49,"endColumn":123,"suggestions":"130"},{"ruleId":"117","severity":1,"message":"122","line":49,"column":130,"nodeType":"119","messageId":"120","endLine":49,"endColumn":131,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":50,"column":33,"nodeType":"134","messageId":"135","endLine":50,"endColumn":35},{"ruleId":"132","severity":1,"message":"136","line":52,"column":49,"nodeType":"134","messageId":"135","endLine":52,"endColumn":51},{"ruleId":"113","severity":1,"message":"137","line":39,"column":8,"nodeType":"115","endLine":39,"endColumn":10,"suggestions":"138"},{"ruleId":"132","severity":1,"message":"133","line":60,"column":20,"nodeType":"134","messageId":"135","endLine":60,"endColumn":22},{"ruleId":"132","severity":1,"message":"136","line":27,"column":55,"nodeType":"134","messageId":"135","endLine":27,"endColumn":57},{"ruleId":"113","severity":1,"message":"139","line":33,"column":8,"nodeType":"115","endLine":33,"endColumn":10,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"136","line":37,"column":32,"nodeType":"134","messageId":"135","endLine":37,"endColumn":34},{"ruleId":"107","severity":1,"message":"141","line":2,"column":15,"nodeType":"109","messageId":"110","endLine":2,"endColumn":20},{"ruleId":"132","severity":1,"message":"136","line":17,"column":46,"nodeType":"134","messageId":"135","endLine":17,"endColumn":48},{"ruleId":"132","severity":1,"message":"136","line":31,"column":48,"nodeType":"134","messageId":"135","endLine":31,"endColumn":50},{"ruleId":"132","severity":1,"message":"136","line":10,"column":31,"nodeType":"134","messageId":"135","endLine":10,"endColumn":33},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'toBeEmptyDOMElement' is defined but never used.","Identifier","unusedVar","'context' is assigned a value but never used.","'setValues' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetContext'. Either include it or remove the dependency array.","ArrayExpression",["144"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["145","146"],"Unnecessary escape character: \\\".",["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'setContext', 'startTimer', and 'timer'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'context.selectedOptions'. Either include it or remove the dependency array.",["166"],"'color' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"messageId":"169","fix":"170","desc":"171"},{"messageId":"172","fix":"173","desc":"174"},{"messageId":"169","fix":"175","desc":"171"},{"messageId":"172","fix":"176","desc":"174"},{"messageId":"169","fix":"177","desc":"171"},{"messageId":"172","fix":"178","desc":"174"},{"messageId":"169","fix":"179","desc":"171"},{"messageId":"172","fix":"180","desc":"174"},{"messageId":"169","fix":"181","desc":"171"},{"messageId":"172","fix":"182","desc":"174"},{"messageId":"169","fix":"183","desc":"171"},{"messageId":"172","fix":"184","desc":"174"},{"messageId":"169","fix":"185","desc":"171"},{"messageId":"172","fix":"186","desc":"174"},{"messageId":"169","fix":"187","desc":"171"},{"messageId":"172","fix":"188","desc":"174"},{"messageId":"169","fix":"189","desc":"171"},{"messageId":"172","fix":"190","desc":"174"},{"messageId":"169","fix":"191","desc":"171"},{"messageId":"172","fix":"192","desc":"174"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [resetContext]",{"range":"197","text":"198"},"removeEscape",{"range":"199","text":"200"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"201","text":"202"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"203","text":"200"},{"range":"204","text":"202"},{"range":"205","text":"200"},{"range":"206","text":"202"},{"range":"207","text":"200"},{"range":"208","text":"202"},{"range":"209","text":"200"},{"range":"210","text":"202"},{"range":"211","text":"200"},{"range":"212","text":"202"},{"range":"213","text":"200"},{"range":"214","text":"202"},{"range":"215","text":"200"},{"range":"216","text":"202"},{"range":"217","text":"200"},{"range":"218","text":"202"},{"range":"219","text":"200"},{"range":"220","text":"202"},"Update the dependencies array to be: [setContext, startTimer, timer]",{"range":"221","text":"222"},"Update the dependencies array to be: [context.selectedOptions]",{"range":"223","text":"224"},[893,895],"[resetContext]",[1383,1384],"",[1383,1383],"\\",[1391,1392],[1391,1391],[1407,1408],[1407,1407],[1415,1416],[1415,1415],[1424,1425],[1424,1424],[1428,1429],[1428,1428],[1444,1445],[1444,1444],[1452,1453],[1452,1452],[1469,1470],[1469,1469],[1477,1478],[1477,1477],[1260,1262],"[setContext, startTimer, timer]",[1286,1288],"[context.selectedOptions]"]