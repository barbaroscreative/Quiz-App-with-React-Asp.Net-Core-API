{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barba\\\\Desktop\\\\Asp.Net Core\\\\quiz-client\\\\src\\\\hooks\\\\useStateContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stateContext = /*#__PURE__*/createContext();\n\nconst getFreshContext = () => {\n  return {\n    participantId: 0,\n    timeTaken: 0,\n    selectedOptions: []\n  };\n};\n\nexport function ContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [context, setContext] = useState(getFreshContext());\n  return /*#__PURE__*/_jsxDEV(stateContext.Provider, {\n    value: (context, setContext),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContextProvider, \"k6XWD2Evp8UL9adaFrrwvwDx/Ug=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/barba/Desktop/Asp.Net Core/quiz-client/src/hooks/useStateContext.js"],"names":["React","createContext","stateContext","getFreshContext","participantId","timeTaken","selectedOptions","ContextProvider","children","context","setContext","useState"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAEA,MAAMC,YAAY,gBAAGD,aAAa,EAAlC;;AAEA,MAAME,eAAe,GAAG,MAAM;AAC1B,SAAO;AACHC,IAAAA,aAAa,EAAE,CADZ;AAEHC,IAAAA,SAAS,EAAE,CAFR;AAGHC,IAAAA,eAAe,EAAE;AAHd,GAAP;AAKH,CAND;;AAQA,OAAO,SAASC,eAAT,OAAuC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC1C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAACR,eAAe,EAAhB,CAAtC;AACA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,GAAEM,OAAO,EAAEC,UAAX,CAA5B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAPeD,e;;KAAAA,e","sourcesContent":["\r\nimport React, { createContext } from 'react'\r\n\r\nconst stateContext = createContext();\r\n\r\nconst getFreshContext = () => {\r\n    return {\r\n        participantId: 0,\r\n        timeTaken: 0,\r\n        selectedOptions: []\r\n    }\r\n}\r\n\r\nexport function ContextProvider({ children }) {\r\n    const [context, setContext] = useState(getFreshContext())\r\n    return (\r\n        <stateContext.Provider value={context, setContext}>\r\n            {children}\r\n        </stateContext.Provider>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}