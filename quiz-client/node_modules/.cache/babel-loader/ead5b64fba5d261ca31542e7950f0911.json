{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barba\\\\Desktop\\\\Asp.Net Core\\\\quiz-client\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Card, CardContent, CardHeader, LinearProgress, List, ListItemButton, Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { createAPIEndpoint, ENDPOINTS } from '../api';\nimport { getFormatedTime } from '../helper';\nimport useStateContext from '../hooks/useStateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [qns, setQns] = useState([]);\n  const [qnIndex, setQnIndex] = useState(0);\n  const [timeTaken, setTimeTaken] = useState(0);\n  const {\n    context,\n    setContext\n  } = useStateContext();\n  let timer;\n\n  const startTimer = () => {\n    timer = setInterval(() => {\n      setTimeTaken(prev => prev + 1);\n    }, [1000]);\n  };\n\n  useEffect(() => {\n    createAPIEndpoint(ENDPOINTS.question).fetch().then(res => {\n      setQns(res.data);\n      startTimer();\n    }).catch(err => {\n      console.log(err);\n    });\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const updateAnswer = (qnId, optionIdx) => {\n    const temp = [...context.selectedOptions];\n    temp.push({\n      qnId,\n      selected: optionIdx\n    });\n  };\n\n  return qns.length != 0 ? /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 640,\n      mx: 'auto',\n      mt: 5,\n      '& .MuiCardHeader-action': {\n        m: 0,\n        alignSelf: 'center'\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: 'Question ' + (qnIndex + 1) + ' of 5',\n      action: /*#__PURE__*/_jsxDEV(Typography, {\n        children: getFormatedTime(timeTaken)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: (qnIndex + 1) * 100 / 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: qns[qnIndex].qnInWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: qns[qnIndex].options.map((item, idx) => /*#__PURE__*/_jsxDEV(ListItemButton, {\n          onClick: () => updateAnswer(qns[qnIndex].qnId, idx),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: String.fromCharCode(65 + idx) + \" . \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this), \" \", item]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 33\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 15\n  }, this) : null;\n}\n\n_s(Quiz, \"h+l5t/F4ynHLFITcSlbLVI80rBo=\", false, function () {\n  return [useStateContext];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/barba/Desktop/Asp.Net Core/quiz-client/src/components/Quiz.js"],"names":["Box","Card","CardContent","CardHeader","LinearProgress","List","ListItemButton","Typography","React","useEffect","useState","createAPIEndpoint","ENDPOINTS","getFormatedTime","useStateContext","Quiz","qns","setQns","qnIndex","setQnIndex","timeTaken","setTimeTaken","context","setContext","timer","startTimer","setInterval","prev","question","fetch","then","res","data","catch","err","console","log","clearInterval","updateAnswer","qnId","optionIdx","temp","selectedOptions","push","selected","length","maxWidth","mx","mt","m","alignSelf","qnInWords","options","map","item","idx","String","fromCharCode"],"mappings":"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","sourcesContent":["import { Box, Card, CardContent, CardHeader, LinearProgress, List, ListItemButton, Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { createAPIEndpoint, ENDPOINTS } from '../api';\r\nimport { getFormatedTime } from '../helper';\r\nimport useStateContext from '../hooks/useStateContext';\r\n\r\nexport default function Quiz() {\r\n\r\n    const [qns, setQns] = useState([])\r\n    const [qnIndex, setQnIndex] = useState(0)\r\n    const [timeTaken, setTimeTaken] = useState(0)\r\n    const { context, setContext } = useStateContext()\r\n    let timer;\r\n\r\n    const startTimer = () => {\r\n        timer = setInterval(() => {\r\n            setTimeTaken(prev => prev + 1)\r\n        }, [1000])\r\n    }\r\n\r\n    useEffect(() => {\r\n        createAPIEndpoint(ENDPOINTS.question)\r\n            .fetch()\r\n            .then(res => {\r\n                setQns(res.data)\r\n                startTimer()\r\n            })\r\n            .catch(err => { console.log(err); })\r\n\r\n        return () => { clearInterval(timer) }\r\n    }, [])\r\n\r\n    const updateAnswer = (qnId, optionIdx) => {\r\n        const temp = [...context.selectedOptions]\r\n        temp.push({\r\n            qnId,\r\n            selected: optionIdx\r\n        })\r\n    }\r\n\r\n    return (\r\n        qns.length != 0\r\n            ? <Card\r\n                sx={{\r\n                    maxWidth: 640, mx: 'auto', mt: 5,\r\n                    '& .MuiCardHeader-action': { m: 0, alignSelf: 'center' }\r\n                }}>\r\n                <CardHeader\r\n                    title={'Question ' + (qnIndex + 1) + ' of 5'}\r\n                    action={<Typography>{getFormatedTime(timeTaken)}</Typography>} />\r\n                <Box>\r\n                    <LinearProgress variant=\"determinate\" value={(qnIndex + 1) * 100 / 5} />\r\n                </Box>\r\n                <CardContent>\r\n                    <Typography variant=\"h6\">\r\n                        {qns[qnIndex].qnInWords}\r\n                    </Typography>\r\n                    <List>\r\n                        {qns[qnIndex].options.map((item, idx) =>\r\n                            <ListItemButton key={idx} onClick={() => updateAnswer(qns[qnIndex].qnId, idx)}>\r\n                                <div>\r\n                                    <b>{String.fromCharCode(65 + idx) + \" . \"}</b> {item}\r\n                                </div>\r\n                            </ListItemButton>\r\n                        )}\r\n\r\n                    </List>\r\n                </CardContent>\r\n            </Card>\r\n            : null\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}