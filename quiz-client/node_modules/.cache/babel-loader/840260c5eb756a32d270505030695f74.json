{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barba\\\\Desktop\\\\Asp.Net Core\\\\quiz-client\\\\src\\\\components\\\\Result.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { createAPIEndpoint, ENDPOINTS } from '../api';\nimport useStateContext from '../hooks/useStateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Result() {\n  _s();\n\n  const {\n    context,\n    setContext\n  } = useStateContext();\n  const {\n    score,\n    setScore\n  } = useState(0);\n  const {\n    qnAnswers,\n    setQnAnswers\n  } = useState([]);\n  useEffect(() => {\n    const ids = context.selectedOptions.map(x => x.qnId);\n    createAPIEndpoint(ENDPOINTS.getAnswers).post(ids).then(res => {\n      const qna = context.selectedOptions.map(x => ({ ...x,\n        ...res.data.find(y => y.qnId == x.qnId)\n      }));\n      setQnAnswers(qna);\n      calculateScore(qna);\n    }).catch(err => console.log(err));\n  }, []);\n\n  const calculateScore = qna => {\n    qna.reduce((acc, curr) => {\n      return curr.answer == curr.selected ? acc + 1 : acc;\n    }, 0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Result\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Result, \"usxOX2sgSx54qbn0sY2RlWkvyiw=\", false, function () {\n  return [useStateContext];\n});\n\n_c = Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["C:/Users/barba/Desktop/Asp.Net Core/quiz-client/src/components/Result.js"],"names":["React","useEffect","useState","createAPIEndpoint","ENDPOINTS","useStateContext","Result","context","setContext","score","setScore","qnAnswers","setQnAnswers","ids","selectedOptions","map","x","qnId","getAnswers","post","then","res","qna","data","find","y","calculateScore","catch","err","console","log","reduce","acc","curr","answer","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,SAA5B,QAA6C,QAA7C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BH,eAAe,EAA/C;AACA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBR,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAES,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,GAAG,GAAGN,OAAO,CAACO,eAAR,CAAwBC,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,IAAnC,CAAZ;AACAd,IAAAA,iBAAiB,CAACC,SAAS,CAACc,UAAX,CAAjB,CACKC,IADL,CACUN,GADV,EAEKO,IAFL,CAEUC,GAAG,IAAI;AACT,YAAMC,GAAG,GAAGf,OAAO,CAACO,eAAR,CACPC,GADO,CACHC,CAAC,KAAK,EACP,GAAGA,CADI;AAEP,WAAIK,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACR,IAAF,IAAUD,CAAC,CAACC,IAA/B;AAFG,OAAL,CADE,CAAZ;AAKAL,MAAAA,YAAY,CAACU,GAAD,CAAZ;AACAI,MAAAA,cAAc,CAACJ,GAAD,CAAd;AACH,KAVL,EAWKK,KAXL,CAWWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXlB;AAYH,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMF,cAAc,GAAGJ,GAAG,IAAI;AAC1BA,IAAAA,GAAG,CAACS,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAe;AACtB,aAAOA,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACE,QAApB,GAA+BH,GAAG,GAAG,CAArC,GAAyCA,GAAhD;AACH,KAFD,EAEG,CAFH;AAGH,GAJD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA/BuB1B,M;UACYD,e;;;KADZC,M","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { createAPIEndpoint, ENDPOINTS } from '../api';\r\nimport useStateContext from '../hooks/useStateContext';\r\n\r\nexport default function Result() {\r\n    const { context, setContext } = useStateContext();\r\n    const { score, setScore } = useState(0);\r\n    const { qnAnswers, setQnAnswers } = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        const ids = context.selectedOptions.map(x => x.qnId)\r\n        createAPIEndpoint(ENDPOINTS.getAnswers)\r\n            .post(ids)\r\n            .then(res => {\r\n                const qna = context.selectedOptions\r\n                    .map(x => ({\r\n                        ...x,\r\n                        ...(res.data.find(y => y.qnId == x.qnId))\r\n                    }))\r\n                setQnAnswers(qna)\r\n                calculateScore(qna)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    const calculateScore = qna => {\r\n        qna.reduce((acc, curr) => {\r\n            return curr.answer == curr.selected ? acc + 1 : acc;\r\n        }, 0)\r\n    }\r\n\r\n    return (\r\n        <div>Result</div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}