{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barba\\\\Desktop\\\\Asp.Net Core\\\\quiz-client\\\\src\\\\components\\\\Answer.js\",\n    _s = $RefreshSig$();\n\nimport { Accordion, AccordionDetails, AccordionSummary, CardMedia, List, ListItem, Typography } from '@mui/material';\nimport { Box, color } from '@mui/system';\nimport React from 'react';\nimport { BASE_URL } from '../api';\nimport { ExpandCircleDownSharp } from '@mui/icons-material';\nimport { red, green, grey } from '@mui/material/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Answer(_ref) {\n  _s();\n\n  let {\n    qnAnswers\n  } = _ref;\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = panel => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  const markCorrectOrNot = (qna, idx) => {\n    if ([qna.answer, qna.selected].includes(idx)) {\n      return {\n        sx: {\n          color: qna.answer == idx ? green[500] : red[500]\n        }\n      };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 5,\n      width: '100%',\n      maxWidth: 640,\n      mx: 'auto'\n    },\n    children: qnAnswers.map((item, j) => /*#__PURE__*/_jsxDEV(Accordion, {\n      disableGutters: true,\n      expanded: expanded === j,\n      onChange: handleChange(j),\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsxDEV(ExpandCircleDownSharp, {\n          sx: {\n            color: item.answer == item.selected ? green[500] : red[500]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 51\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            width: '90%',\n            flexShrink: 0\n          },\n          children: item.qnInWords\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        sx: {\n          backgroundColor: grey[800]\n        },\n        children: [item.imageName ? /*#__PURE__*/_jsxDEV(CardMedia, {\n          component: \"img\",\n          image: BASE_URL + 'images/' + item.imageName,\n          sx: {\n            m: '10px auto',\n            width: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(List, {\n          children: item.options.map((x, i) => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(Typography, { ...markCorrectOrNot(item, i),\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: String.fromCharCode(65 + i) + \" . \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 41\n              }, this), x]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 37\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)]\n    }, j, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 45\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Answer, \"DuL5jiiQQFgbn7gBKAyxwS/H4Ek=\");\n\n_c = Answer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["C:/Users/barba/Desktop/Asp.Net Core/quiz-client/src/components/Answer.js"],"names":["Accordion","AccordionDetails","AccordionSummary","CardMedia","List","ListItem","Typography","Box","color","React","BASE_URL","ExpandCircleDownSharp","red","green","grey","Answer","qnAnswers","expanded","setExpanded","useState","handleChange","panel","event","isExpanded","markCorrectOrNot","qna","idx","answer","selected","includes","sx","mt","width","maxWidth","mx","map","item","j","flexShrink","qnInWords","backgroundColor","imageName","m","options","x","i","String","fromCharCode"],"mappings":"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","sourcesContent":["import { Accordion, AccordionDetails, AccordionSummary, CardMedia, List, ListItem, Typography } from '@mui/material';\r\nimport { Box, color } from '@mui/system';\r\nimport React from 'react';\r\nimport { BASE_URL } from '../api';\r\nimport { ExpandCircleDownSharp } from '@mui/icons-material';\r\nimport { red, green, grey } from '@mui/material/colors';\r\n\r\nexport default function Answer({ qnAnswers }) {\r\n    const [expanded, setExpanded] = React.useState(false)\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    const markCorrectOrNot = (qna, idx) => {\r\n        if ([qna.answer, qna.selected].includes(idx)) {\r\n            return { sx: { color: qna.answer == idx ? green[500] : red[500] } }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ mt: 5, width: '100%', maxWidth: 640, mx: 'auto' }}>\r\n            {\r\n                qnAnswers.map((item, j) => (<Accordion\r\n                    disableGutters\r\n                    key={j}\r\n                    expanded={expanded === j}\r\n                    onChange={handleChange(j)}>\r\n                    <AccordionSummary expandIcon={<ExpandCircleDownSharp\r\n                        sx={{\r\n                            color: item.answer == item.selected ? green[500] : red[500]\r\n                        }}\r\n                    />}>\r\n                        <Typography\r\n                            sx={{ width: '90%', flexShrink: 0 }}>\r\n                            {item.qnInWords}\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails sx={{ backgroundColor: grey[800] }}>\r\n                        {item.imageName ?\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                image={BASE_URL + 'images/' + item.imageName}\r\n                                sx={{ m: '10px auto', width: '50%' }}\r\n                            /> : null}\r\n                        <List>\r\n                            {item.options.map((x, i) =>\r\n                                <ListItem key={i}\r\n                                >\r\n                                    <Typography {...markCorrectOrNot(item, i)}>\r\n                                        <b>\r\n                                            {String.fromCharCode(65 + i) + \" . \"}\r\n                                        </b>{x}\r\n                                    </Typography>\r\n                                </ListItem>\r\n                            )}\r\n                        </List>\r\n                    </AccordionDetails>\r\n                </Accordion>))\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}